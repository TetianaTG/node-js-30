Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20__9_34_AM__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20__9_34_AM__Default_Changelist_.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20__9_34_AM__Default_Changelist_.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_20_20,_9_34_AM_[Default_Changelist]" date="1603175673010" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_20_20,_9_34_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/20/20, 9:34 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/aws.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/aws.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/aws.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="accountSettings">
-    <option name="activeRegion" value="us-east-1" />
-    <option name="recentlyUsedRegions">
-      <list>
-        <option value="us-east-1" />
-      </list>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/codeStyleConfig.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/codeStyles/codeStyleConfig.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,5 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <state>
-    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
-  </state>
-</component>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20,_9_34_AM_[Default_Changelist]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20,_9_34_AM_[Default_Changelist]/shelved.patch	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_10_20_20,_9_34_AM_[Default_Changelist]/shelved.patch	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,265 +0,0 @@
-Index: API/contacts/contacts.router.js
-===================================================================
---- API/contacts/contacts.router.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-+++ API/contacts/contacts.router.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-@@ -1,19 +0,0 @@
--const express = require('express');
--const ContactsControl = require('./contacts.controller');
--const contactsRouter = express.Router();
--
--contactsRouter.get('/', ContactsControl.getContacts);
--contactsRouter.get('/:contactid', ContactsControl.getContact);
--contactsRouter.post(
--  '/',
--  ContactsControl.validateAddContact,
--  ContactsControl.addContact,
--);
--contactsRouter.delete('/:contactid', ContactsControl.removeContact);
--contactsRouter.patch(
--  '/:contactid',
--  ContactsControl.validateUpdateContact,
--  ContactsControl.updateContact,
--);
--
--module.exports = contactsRouter;
-Index: API/index.js
-===================================================================
---- API/index.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-+++ API/index.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-@@ -1,65 +0,0 @@
--const morgan = require('morgan');
--const cors = require('cors');
--const express = require('express');
--const mongoose = require('mongoose');
--const contactsRouter = require('./contacts/contacts.router');
--
--require('dotenv').config();
--
--class ContacsServer {
--  constructor() {
--    this.server = null;
--  }
--
--  initServer() {
--    this.server = express();
--  }
--
--  initMiddlewares() {
--    this.server.use(express.json());
--    this.server.use(morgan('tiny'));
--    this.server.use(cors());
--  }
--
--  initRoutes() {
--    this.server.use('/contacts', contactsRouter);
--  }
--
--  async initDatabase() {
--    try {
--      await mongoose.connect(
--        process.env.MONGODB_URL,
--        {
--          useNewUrlParser: true,
--          useUnifiedTopology: true,
--        },
--        err => {
--          if (err) {
--            console.log(err);
--            return process.exit(1);
--          }
--          console.log('Database connection successful');
--        },
--      );
--    } catch (err) {
--      console.log(err);
--    }
--  }
--
--  startListening() {
--    const PORT = process.env.PORT;
--    this.server.listen(PORT, () => {
--      console.log('Server started listening on port', PORT);
--    });
--  }
--
--  async start() {
--    this.initServer();
--    this.initMiddlewares();
--    this.initRoutes();
--    await this.initDatabase();
--    this.startListening();
--  }
--}
--
--new ContacsServer().start();
-\ No newline at end of file
-Index: API/contacts/contacts.controller.js
-===================================================================
---- API/contacts/contacts.controller.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-+++ API/contacts/contacts.controller.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-@@ -1,139 +0,0 @@
--const Joi = require('@hapi/joi');
--const isEmpty = require('lodash.isempty');
--const contactsModel = require('./contacts.model');
--
--const postValidation = {
--  name: Joi.string().required(),
--  email: Joi.string().required(),
--  phone: Joi.string().required(),
--  subscription: Joi.string(),
--  password: Joi.string(),
--  token: Joi.string().empty(''),
--};
--
--const patchValidation = {
--  name: Joi.string(),
--  email: Joi.string(),
--  phone: Joi.string(),
--  subscription: Joi.string(),
--  password: Joi.string(),
--  token: Joi.string().empty(''),
--};
--
--class ContactsController {
--  get getContacts() {
--    return this._getContacts.bind(this);
--  }
--  get getContact() {
--    return this._getContact.bind(this);
--  }
--  get addContact() {
--    return this._addContact.bind(this);
--  }
--  get removeContact() {
--    return this._removeContact.bind(this);
--  }
--  get updateContact() {
--    return this._updateContact.bind(this);
--  }
--
--  validateAddContact(req, res, next) {
--    const schema = Joi.object(postValidation);
--    const validation = schema.validate(req.body);
--
--    if (validation.error) return handleValidationError(res, validation);
--
--    next();
--  }
--
--  validateUpdateContact(req, res, next) {
--    const schema = Joi.object(patchValidation);
--    const validation = schema.validate(req.body);
--
--    if (validation.error) return handleValidationError(res, validation);
--
--    next();
--  }
--
--  // GET
--  async _getContacts(req, res) {
--    try {
--      const contacts = await contactsModel.find();
--
--      res.status(200).send(contacts);
--    } catch (err) {
--      res.status(400).send(err.message);
--    }
--  }
--
--  async _getContact(req, res) {
--    try {
--      const { contactid } = req.params;
--      const contact = await contactsModel.findById(contactid);
--
--      res.status(200).send(contact);
--    } catch (err) {
--      res.status(400).send(err.message);
--    }
--  }
--
--  // POST
--  async _addContact(req, res) {
--    try {
--      const newContact = { ...req.body };
--      const existedContact = await contactsModel.findOne({
--        email: newContact.email,
--      });
--
--      if (existedContact)
--        return res.status(400).send('Contact with such email already exists');
--
--      await contactsModel.create(newContact, (err, contact) => {
--        if (!err)
--          return res.status(200).send(`Contact ${contact.name} created`);
--      });
--    } catch (err) {
--      res.status(400).send(err.message);
--    }
--  }
--
--  // DELETE
--  async _removeContact(req, res) {
--    try {
--      const { contactid } = req.params;
--
--      await contactsModel.findByIdAndRemove(contactid, function (err) {
--        if (!err) return res.status(200).send(`Contact deleted`);
--      });
--
--      res.status(200).send();
--    } catch (err) {
--      res.status(400).send(err.message);
--    }
--  }
--
--  // PATCH
--  async _updateContact(req, res) {
--    try {
--      const { contactid } = req.params;
--      const updatedContact = { ...req.body };
--
--      if (isEmpty(req.body)) return res.status(404).send('missing fields');
--
--      const newContact = await contactsModel.findByIdAndUpdate(
--        contactid,
--        updatedContact,
--        { new: true },
--      );
--
--      res.status(200).send(newContact);
--    } catch (err) {
--      res.status(400).send(err.message);
--    }
--  }
--}
--
--function handleValidationError(res, val) {
--  return res.status(400).send(val.error.message);
--}
--module.exports = new ContactsController();
-Index: API/contacts/contacts.model.js
-===================================================================
---- API/contacts/contacts.model.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-+++ API/contacts/contacts.model.js	(revision a4894a871190541a7c10e25d2dfc194f9a2c7019)
-@@ -1,20 +0,0 @@
--const mongoose = require('mongoose');
--const Schema = mongoose.Schema;
--
--const contactsSchema = new Schema(
--  {
--    name: { type: String, required: true },
--    email: { type: String, required: true },
--    phone: { type: String, required: true },
--    subscription: String,
--    password: String,
--    token: String,
--  },
--  {
--    versionKey: false,
--  },
--);
--
--const contactsModel = mongoose.model('Contacts', contactsSchema);
--
--module.exports = contactsModel;
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20,_9_32_AM_[Default_Changelist]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20,_9_32_AM_[Default_Changelist]/shelved.patch	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20,_9_32_AM_[Default_Changelist]/shelved.patch	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,102 +0,0 @@
-Index: API/index.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>const morgan = require('morgan');\nconst cors = require('cors');\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst contactsRouter = require('./contacts/contacts.router');\n\nrequire('dotenv').config();\n\nclass ContacsServer {\n  constructor() {\n    this.server = null;\n  }\n\n  initServer() {\n    this.server = express();\n  }\n\n  initMiddlewares() {\n    this.server.use(express.json());\n    this.server.use(morgan('tiny'));\n    this.server.use(cors());\n  }\n\n  initRoutes() {\n    this.server.use('/contacts', contactsRouter);\n  }\n\n  async initDatabase() {\n    try {\n      await mongoose.connect(\n        process.env.MONGODB_URL,\n        {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        },\n        err => {\n          if (err) {\n            console.log(err);\n            return process.exit(1);\n          }\n          console.log('Database connection successful');\n        },\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  startListening() {\n    const PORT = process.env.PORT;\n    this.server.listen(PORT, () => {\n      console.log('Server started listening on port', PORT);\n    });\n  }\n\n  async start() {\n    this.initServer();\n    this.initMiddlewares();\n    this.initRoutes();\n    await this.initDatabase();\n    this.startListening();\n  }\n}\n\nnew ContacsServer().start();
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- API/index.js	(revision f71ab617f34612c764451947a913f9098d338f2c)
-+++ API/index.js	(date 1603129779318)
-@@ -29,20 +29,14 @@
-     try {
-       await mongoose.connect(
-         process.env.MONGODB_URL,
--        {
--          useNewUrlParser: true,
--          useUnifiedTopology: true,
--        },
--        err => {
--          if (err) {
--            console.log(err);
--            return process.exit(1);
--          }
--          console.log('Database connection successful');
--        },
--      );
-+          {
-+            useNewUrlParser: true,
-+            useUnifiedTopology: true,
-+          });
-+      console.log('Database connection successful');
-     } catch (err) {
-       console.log(err);
-+      process.exit(1);
-     }
-   }
- 
-Index: API/contacts/contacts.controller.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>const Joi = require('@hapi/joi');\nconst isEmpty = require('lodash.isempty');\nconst contactsModel = require('./contacts.model');\n\nconst postValidation = {\n  name: Joi.string().required(),\n  email: Joi.string().required(),\n  phone: Joi.string().required(),\n  subscription: Joi.string(),\n  password: Joi.string(),\n  token: Joi.string().empty(''),\n};\n\nconst patchValidation = {\n  name: Joi.string(),\n  email: Joi.string(),\n  phone: Joi.string(),\n  subscription: Joi.string(),\n  password: Joi.string(),\n  token: Joi.string().empty(''),\n};\n\nclass ContactsController {\n  get getContacts() {\n    return this._getContacts.bind(this);\n  }\n  get getContact() {\n    return this._getContact.bind(this);\n  }\n  get addContact() {\n    return this._addContact.bind(this);\n  }\n  get removeContact() {\n    return this._removeContact.bind(this);\n  }\n  get updateContact() {\n    return this._updateContact.bind(this);\n  }\n\n  validateAddContact(req, res, next) {\n    const schema = Joi.object(postValidation);\n    const validation = schema.validate(req.body);\n\n    if (validation.error) return handleValidationError(res, validation);\n\n    next();\n  }\n\n  validateUpdateContact(req, res, next) {\n    const schema = Joi.object(patchValidation);\n    const validation = schema.validate(req.body);\n\n    if (validation.error) return handleValidationError(res, validation);\n\n    next();\n  }\n\n  // GET\n  async _getContacts(req, res) {\n    try {\n      const contacts = await contactsModel.find();\n\n      res.status(200).send(contacts);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  async _getContact(req, res) {\n    try {\n      const { contactid } = req.params;\n      const contact = await contactsModel.findById(contactid);\n\n      res.status(200).send(contact);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // POST\n  async _addContact(req, res) {\n    try {\n      const newContact = { ...req.body };\n      const existedContact = await contactsModel.findOne({\n        email: newContact.email,\n      });\n\n      if (existedContact)\n        return res.status(400).send('Contact with such email already exists');\n\n      await contactsModel.create(newContact, (err, contact) => {\n        if (!err)\n          return res.status(200).send(`Contact ${contact.name} created`);\n      });\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // DELETE\n  async _removeContact(req, res) {\n    try {\n      const { contactid } = req.params;\n\n      await contactsModel.findByIdAndRemove(contactid, function (err) {\n        if (!err) return res.status(200).send(`Contact deleted`);\n      });\n\n      res.status(200).send();\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // PATCH\n  async _updateContact(req, res) {\n    try {\n      const { contactid } = req.params;\n      const updatedContact = { ...req.body };\n\n      if (isEmpty(req.body)) return res.status(404).send('missing fields');\n\n      const newContact = await contactsModel.findByIdAndUpdate(\n        contactid,\n        updatedContact,\n        { new: true },\n      );\n\n      res.status(200).send(newContact);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n}\n\nfunction handleValidationError(res, val) {\n  return res.status(400).send(val.error.message);\n}\nmodule.exports = new ContactsController();\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- API/contacts/contacts.controller.js	(revision f71ab617f34612c764451947a913f9098d338f2c)
-+++ API/contacts/contacts.controller.js	(date 1603137967310)
-@@ -65,12 +65,11 @@
-       res.status(400).send(err.message);
-     }
-   }
--
-+// DELETE
-   async _getContact(req, res) {
-     try {
--      const { contactid } = req.params;
-+      const {contactid} = req.params;
-       const contact = await contactsModel.findById(contactid);
--
-       res.status(200).send(contact);
-     } catch (err) {
-       res.status(400).send(err.message);
-@@ -85,13 +84,13 @@
-         email: newContact.email,
-       });
- 
--      if (existedContact)
--        return res.status(400).send('Contact with such email already exists');
-+      // if (existedContact)
-+       /// return res.status(400).send('Contact with such email already exists');
- 
--      await contactsModel.create(newContact, (err, contact) => {
--        if (!err)
--          return res.status(200).send(`Contact ${contact.name} created`);
--      });
-+      await contactsModel.create(newContact, (err, contact));
-+       // if (!err)
-+         // return res.status(200).send(`Contact ${contact.name} created`);
-+      res.status(200).send(`Contact ${contact.name} created`);
-     } catch (err) {
-       res.status(400).send(err.message);
-     }
-@@ -100,18 +99,13 @@
-   // DELETE
-   async _removeContact(req, res) {
-     try {
--      const { contactid } = req.params;
--
--      await contactsModel.findByIdAndRemove(contactid, function (err) {
--        if (!err) return res.status(200).send(`Contact deleted`);
--      });
--
--      res.status(200).send();
-+      const {contactid} = req.params;
-+      await contactsModel.findByIdAndRemove(contactid);
-+      res.status(200).send('Contact deleted');
-     } catch (err) {
-       res.status(400).send(err.message);
-     }
-   }
--
-   // PATCH
-   async _updateContact(req, res) {
-     try {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/workspace.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,116 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="BranchesTreeState">
-    <expand />
-    <select />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="9570fdb0-d9c9-4235-85b8-c3ee2b9a3709" name="Default Changelist" comment="msg 4 homework">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/package.json" afterDir="false" />
-    </list>
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="ProjectId" id="1iur87rskxMnX3XBahV72TCS39n" />
-  <component name="ProjectLevelVcsManager">
-    <ConfirmationsSetting value="2" id="Add" />
-  </component>
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="dart.analysis.tool.window.visible" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
-    <property name="nodejs_package_manager_path" value="npm" />
-    <property name="vue.rearranger.settings.migration" value="true" />
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="9570fdb0-d9c9-4235-85b8-c3ee2b9a3709" name="Default Changelist" comment="" />
-      <created>1602768155515</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1602768155515</updated>
-      <workItem from="1602768156621" duration="1577000" />
-      <workItem from="1602789447420" duration="20000" />
-      <workItem from="1602789612619" duration="2117000" />
-      <workItem from="1602792154299" duration="69000" />
-      <workItem from="1603179700540" duration="303000" />
-    </task>
-    <task id="LOCAL-00001" summary="msg 4 homework">
-      <created>1602768709750</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1602768709751</updated>
-    </task>
-    <task id="LOCAL-00002" summary="msg 4 homework">
-      <created>1603178779712</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1603178779712</updated>
-    </task>
-    <option name="localTasksCounter" value="3" />
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State>
-              <option name="CUSTOM_BOOLEAN_PROPERTIES">
-                <map>
-                  <entry key="Show.Git.Branches" value="false" />
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-    <option name="oldMeFiltersMigrated" value="true" />
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="msg 4 homework" />
-    <option name="LAST_COMMIT_MESSAGE" value="msg 4 homework" />
-  </component>
-  <component name="WindowStateProjectService">
-    <state x="48" y="97" width="1265" height="699" key="MergeDialog" timestamp="1602768307267">
-      <screen x="0" y="23" width="1440" height="852" />
-    </state>
-    <state x="48" y="97" width="1265" height="699" key="MergeDialog/0.23.1440.852@0.23.1440.852" timestamp="1602768307267" />
-    <state x="352" y="233" key="MultipleFileMergeDialog" timestamp="1602768310947">
-      <screen x="0" y="23" width="1440" height="852" />
-    </state>
-    <state x="352" y="233" key="MultipleFileMergeDialog/0.23.1440.852@0.23.1440.852" timestamp="1602768310947" />
-    <state x="312" y="192" key="Vcs.Push.Dialog.v2" timestamp="1602792010935">
-      <screen x="0" y="23" width="1440" height="852" />
-    </state>
-    <state x="312" y="192" key="Vcs.Push.Dialog.v2/0.23.1440.852@0.23.1440.852" timestamp="1602792010935" />
-    <state x="513" y="386" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1603176124483">
-      <screen x="0" y="23" width="1440" height="852" />
-    </state>
-    <state x="513" y="386" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.23.1440.852@0.23.1440.852" timestamp="1603176124483" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/vcs.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/modules.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/node-js-30-2.iml" filepath="$PROJECT_DIR$/.idea/node-js-30-2.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20__9_32_AM__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20__9_32_AM__Default_Changelist_.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20__9_32_AM__Default_Changelist_.xml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_10_20_20,_9_32_AM_[Default_Changelist]" date="1603175572989" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_20_20,_9_32_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/20/20, 9:32 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/node-js-30-2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/node-js-30-2.iml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
+++ .idea/node-js-30-2.iml	(revision f0d4bcd2e18267f5e1c30d4bcc147f7d9eaf621f)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="WEB_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
-      <excludeFolder url="file://$MODULE_DIR$/temp" />
-      <excludeFolder url="file://$MODULE_DIR$/tmp" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
