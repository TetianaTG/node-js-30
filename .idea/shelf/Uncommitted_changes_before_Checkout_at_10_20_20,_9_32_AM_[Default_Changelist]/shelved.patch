Index: API/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const morgan = require('morgan');\nconst cors = require('cors');\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst contactsRouter = require('./contacts/contacts.router');\n\nrequire('dotenv').config();\n\nclass ContacsServer {\n  constructor() {\n    this.server = null;\n  }\n\n  initServer() {\n    this.server = express();\n  }\n\n  initMiddlewares() {\n    this.server.use(express.json());\n    this.server.use(morgan('tiny'));\n    this.server.use(cors());\n  }\n\n  initRoutes() {\n    this.server.use('/contacts', contactsRouter);\n  }\n\n  async initDatabase() {\n    try {\n      await mongoose.connect(\n        process.env.MONGODB_URL,\n        {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        },\n        err => {\n          if (err) {\n            console.log(err);\n            return process.exit(1);\n          }\n          console.log('Database connection successful');\n        },\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  startListening() {\n    const PORT = process.env.PORT;\n    this.server.listen(PORT, () => {\n      console.log('Server started listening on port', PORT);\n    });\n  }\n\n  async start() {\n    this.initServer();\n    this.initMiddlewares();\n    this.initRoutes();\n    await this.initDatabase();\n    this.startListening();\n  }\n}\n\nnew ContacsServer().start();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- API/index.js	(revision f71ab617f34612c764451947a913f9098d338f2c)
+++ API/index.js	(date 1603129779318)
@@ -29,20 +29,14 @@
     try {
       await mongoose.connect(
         process.env.MONGODB_URL,
-        {
-          useNewUrlParser: true,
-          useUnifiedTopology: true,
-        },
-        err => {
-          if (err) {
-            console.log(err);
-            return process.exit(1);
-          }
-          console.log('Database connection successful');
-        },
-      );
+          {
+            useNewUrlParser: true,
+            useUnifiedTopology: true,
+          });
+      console.log('Database connection successful');
     } catch (err) {
       console.log(err);
+      process.exit(1);
     }
   }
 
Index: API/contacts/contacts.controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Joi = require('@hapi/joi');\nconst isEmpty = require('lodash.isempty');\nconst contactsModel = require('./contacts.model');\n\nconst postValidation = {\n  name: Joi.string().required(),\n  email: Joi.string().required(),\n  phone: Joi.string().required(),\n  subscription: Joi.string(),\n  password: Joi.string(),\n  token: Joi.string().empty(''),\n};\n\nconst patchValidation = {\n  name: Joi.string(),\n  email: Joi.string(),\n  phone: Joi.string(),\n  subscription: Joi.string(),\n  password: Joi.string(),\n  token: Joi.string().empty(''),\n};\n\nclass ContactsController {\n  get getContacts() {\n    return this._getContacts.bind(this);\n  }\n  get getContact() {\n    return this._getContact.bind(this);\n  }\n  get addContact() {\n    return this._addContact.bind(this);\n  }\n  get removeContact() {\n    return this._removeContact.bind(this);\n  }\n  get updateContact() {\n    return this._updateContact.bind(this);\n  }\n\n  validateAddContact(req, res, next) {\n    const schema = Joi.object(postValidation);\n    const validation = schema.validate(req.body);\n\n    if (validation.error) return handleValidationError(res, validation);\n\n    next();\n  }\n\n  validateUpdateContact(req, res, next) {\n    const schema = Joi.object(patchValidation);\n    const validation = schema.validate(req.body);\n\n    if (validation.error) return handleValidationError(res, validation);\n\n    next();\n  }\n\n  // GET\n  async _getContacts(req, res) {\n    try {\n      const contacts = await contactsModel.find();\n\n      res.status(200).send(contacts);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  async _getContact(req, res) {\n    try {\n      const { contactid } = req.params;\n      const contact = await contactsModel.findById(contactid);\n\n      res.status(200).send(contact);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // POST\n  async _addContact(req, res) {\n    try {\n      const newContact = { ...req.body };\n      const existedContact = await contactsModel.findOne({\n        email: newContact.email,\n      });\n\n      if (existedContact)\n        return res.status(400).send('Contact with such email already exists');\n\n      await contactsModel.create(newContact, (err, contact) => {\n        if (!err)\n          return res.status(200).send(`Contact ${contact.name} created`);\n      });\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // DELETE\n  async _removeContact(req, res) {\n    try {\n      const { contactid } = req.params;\n\n      await contactsModel.findByIdAndRemove(contactid, function (err) {\n        if (!err) return res.status(200).send(`Contact deleted`);\n      });\n\n      res.status(200).send();\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  // PATCH\n  async _updateContact(req, res) {\n    try {\n      const { contactid } = req.params;\n      const updatedContact = { ...req.body };\n\n      if (isEmpty(req.body)) return res.status(404).send('missing fields');\n\n      const newContact = await contactsModel.findByIdAndUpdate(\n        contactid,\n        updatedContact,\n        { new: true },\n      );\n\n      res.status(200).send(newContact);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n}\n\nfunction handleValidationError(res, val) {\n  return res.status(400).send(val.error.message);\n}\nmodule.exports = new ContactsController();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- API/contacts/contacts.controller.js	(revision f71ab617f34612c764451947a913f9098d338f2c)
+++ API/contacts/contacts.controller.js	(date 1603137967310)
@@ -65,12 +65,11 @@
       res.status(400).send(err.message);
     }
   }
-
+// DELETE
   async _getContact(req, res) {
     try {
-      const { contactid } = req.params;
+      const {contactid} = req.params;
       const contact = await contactsModel.findById(contactid);
-
       res.status(200).send(contact);
     } catch (err) {
       res.status(400).send(err.message);
@@ -85,13 +84,13 @@
         email: newContact.email,
       });
 
-      if (existedContact)
-        return res.status(400).send('Contact with such email already exists');
+      // if (existedContact)
+       /// return res.status(400).send('Contact with such email already exists');
 
-      await contactsModel.create(newContact, (err, contact) => {
-        if (!err)
-          return res.status(200).send(`Contact ${contact.name} created`);
-      });
+      await contactsModel.create(newContact, (err, contact));
+       // if (!err)
+         // return res.status(200).send(`Contact ${contact.name} created`);
+      res.status(200).send(`Contact ${contact.name} created`);
     } catch (err) {
       res.status(400).send(err.message);
     }
@@ -100,18 +99,13 @@
   // DELETE
   async _removeContact(req, res) {
     try {
-      const { contactid } = req.params;
-
-      await contactsModel.findByIdAndRemove(contactid, function (err) {
-        if (!err) return res.status(200).send(`Contact deleted`);
-      });
-
-      res.status(200).send();
+      const {contactid} = req.params;
+      await contactsModel.findByIdAndRemove(contactid);
+      res.status(200).send('Contact deleted');
     } catch (err) {
       res.status(400).send(err.message);
     }
   }
-
   // PATCH
   async _updateContact(req, res) {
     try {
